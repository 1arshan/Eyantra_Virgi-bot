
#!/usr/bin/env python2.7
"""
This file is for Action Client for building connection with pkg_ros_iot_client.
"""

import rospy
import actionlib
import time
from pkg_ros_iot_bridge.msg import msgMqttSub  # iot bridge connection
#testing-----
from pkg_ros_iot_bridge.msg import msgRosIotAction      # Message Class that is used by ROS Actions internally
from pkg_ros_iot_bridge.msg import msgRosIotGoal        # Message Class that is used for Goal Messages
from pkg_ros_iot_bridge.msg import msgRosIotResult      # Message Class that is used for Result Messages



class IotClient:

    # Constructor
    def __init__(self):
        """
        Initialize Action Client
        """
        self._ac = actionlib.ActionClient('/action_iot_ros',
                                          msgRosIotAction)

        # Dictionary to Store all the goal handles
        self._goal_handles = {}

        # Store the MQTT Topic on which to Publish in a variable
        param_config_iot = rospy.get_param('config_iot')
        self._config_mqtt_pub_topic = param_config_iot['mqtt']['topic_pub']

    def on_transition(self, goal_handle):
        """
        from on_goal() to on_transition(). goal_handle generated by send_goal() is used here.
        """

        result = msgRosIotResult()
        print(result)

        index = 0
        for i in self._goal_handles:
            if self._goal_handles[i] == goal_handle:
                index = i
                break

        # Comm State - Monitors the State Machine of the Client which is different from Server's
        # Comm State = 2 -> Active
        # Comm State = 3 -> Waiting for Result
        # Comm State = 7 -> Done

        # if (Comm State == ACTIVE)
        if goal_handle.get_comm_state() == 2:
            rospy.loginfo(str(index) + ": Goal just went active.")

        # if (Comm State == DONE)
        if goal_handle.get_comm_state() == 7:
            rospy.loginfo(str(index) + ": Goal is DONE")
            rospy.loginfo(goal_handle.get_terminal_state())

            # get_result() gets the result produced by the Action Server
            result = goal_handle.get_result()
            rospy.loginfo(result.flag_success)

            if result.flag_success:
                rospy.loginfo("Goal successfully completed. Client Goal Handle #: " + str(index))
            else:
                rospy.loginfo("Goal failed. Client Goal Handle #: " + str(index))

        # This function is used to send Goals to Action Server
    def send_goal(self, arg_protocol, arg_mode, arg_topic, arg_message):
        """
        This function sends goal to iot client.
        """

        # Create a Goal Message object
        goal = msgRosIotGoal()

        goal.protocol = arg_protocol
        goal.mode = arg_mode
        goal.topic = arg_topic
        goal.message = arg_message


        # self.on_transition - It is a function pointer to a function which will be called when
        #                       there is a change of state in the Action Client State Machine
        goal_handle = self._ac.send_goal(goal,
                                            self.on_transition,
                                            None)

        return goal_handle

    @property
    def goal_handles(self):
        return self._goal_handles

    @property
    def config_mqtt_pub_topic(self):
        return self._config_mqtt_pub_topic
