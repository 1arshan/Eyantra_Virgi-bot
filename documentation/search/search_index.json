{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documentation","title":"Index"},{"location":"#documentation","text":"","title":"Documentation"},{"location":"camera_one/","text":"Module camera_one This file contains get_qr_data,get_item_details,get_inventory_string and Camera1. Functions get_inventory_string(color, i, j) This function create a coma separated string of packgen information to send data on the inventory sheet. :param color:It is color of packgen.It can be red,yellow and green. :param i:i is index of column of packgen in the shelf. :param j:j is index of row of packgen in the shelf. :return: returns a string containing each column details of inventory sheet separated by comas. get_item_details(color) This function returns specification of Packgen based on color. :param color: It is color of the Packgen! Its possible values are red,yellow and green. :return:details,details is a dict containing information of packgen.It contains item,sku_alpha,priority,cost and Estimated Time of Delivery. get_qr_data(arg_image) This function decode data from qr code and return package info. :param arg_image: Details of Packagen in QR code encoded form. :return String of Decoded information of Packagen. Classes Camera1 This is a class for finding details of each packgen present in the sheet, using camera1 module. Ancestors (in MRO) ------------------ camera_one.Camera1 Instance variables ------------------ bridge inventory list temp Methods ------- __init__(self, temp) This is constructor of class Camera1 :param temp: A variable to unregister subscriber after execution. callback(self, data) This function is callback of camera1 module. :param data: result of camera1 :return: null","title":"CameraOne"},{"location":"camera_one/#module-camera_one","text":"This file contains get_qr_data,get_item_details,get_inventory_string and Camera1.","title":"Module camera_one"},{"location":"camera_one/#functions","text":"get_inventory_string(color, i, j) This function create a coma separated string of packgen information to send data on the inventory sheet. :param color:It is color of packgen.It can be red,yellow and green. :param i:i is index of column of packgen in the shelf. :param j:j is index of row of packgen in the shelf. :return: returns a string containing each column details of inventory sheet separated by comas. get_item_details(color) This function returns specification of Packgen based on color. :param color: It is color of the Packgen! Its possible values are red,yellow and green. :return:details,details is a dict containing information of packgen.It contains item,sku_alpha,priority,cost and Estimated Time of Delivery. get_qr_data(arg_image) This function decode data from qr code and return package info. :param arg_image: Details of Packagen in QR code encoded form. :return String of Decoded information of Packagen.","title":"Functions"},{"location":"camera_one/#classes","text":"Camera1 This is a class for finding details of each packgen present in the sheet, using camera1 module. Ancestors (in MRO) ------------------ camera_one.Camera1 Instance variables ------------------ bridge inventory list temp Methods ------- __init__(self, temp) This is constructor of class Camera1 :param temp: A variable to unregister subscriber after execution. callback(self, data) This function is callback of camera1 module. :param data: result of camera1 :return: null","title":"Classes"},{"location":"get_sheet/","text":"Module get_sheet Functions get_data_from_inventory_sheet() get_data_from_sheet(max_order_id, order_info)","title":"GetSheet"},{"location":"get_sheet/#module-get_sheet","text":"","title":"Module get_sheet"},{"location":"get_sheet/#functions","text":"get_data_from_inventory_sheet() get_data_from_sheet(max_order_id, order_info)","title":"Functions"},{"location":"iot_camera/","text":"Module iot_client This file is for Action Client for building connection with pkg_ros_iot_client. Classes IotClient Ancestors (in MRO) ------------------ iot_client.IotClient Instance variables ------------------ config_mqtt_pub_topic goal_handles Methods ------- __init__(self) Initialize Action Client on_transition(self, goal_handle) from on_goal() to on_transition(). goal_handle generated by send_goal() is used here. send_goal(self, arg_protocol, arg_mode, arg_topic, arg_message) This function sends goal to iot client.","title":"IotCamera"},{"location":"iot_camera/#module-iot_client","text":"This file is for Action Client for building connection with pkg_ros_iot_client.","title":"Module iot_client"},{"location":"iot_camera/#classes","text":"IotClient Ancestors (in MRO) ------------------ iot_client.IotClient Instance variables ------------------ config_mqtt_pub_topic goal_handles Methods ------- __init__(self) Initialize Action Client on_transition(self, goal_handle) from on_goal() to on_transition(). goal_handle generated by send_goal() is used here. send_goal(self, arg_protocol, arg_mode, arg_topic, arg_message) This function sends goal to iot client.","title":"Classes"},{"location":"ur5_1_controller/","text":"Module ur5_1_controller This file control ur5_1 all the operations performed by ur5_1 bot. Functions add_all_boxes(ur5_bot) This functions add all boxes in the shelf to the planning scene. :param ur5_bot: it is instance of class ur5_moveit. :return: null handle_bot1() Controls ur5_1 pick boxes from the shelf and place them on the belt. :return: null main()","title":"Ur5_1"},{"location":"ur5_1_controller/#module-ur5_1_controller","text":"This file control ur5_1 all the operations performed by ur5_1 bot.","title":"Module ur5_1_controller"},{"location":"ur5_1_controller/#functions","text":"add_all_boxes(ur5_bot) This functions add all boxes in the shelf to the planning scene. :param ur5_bot: it is instance of class ur5_moveit. :return: null handle_bot1() Controls ur5_1 pick boxes from the shelf and place them on the belt. :return: null main()","title":"Functions"},{"location":"ur5_2_controller/","text":"Module ur5_2_controller This file control ur5_2, handle conveyor belt and placement of boxes from belt to bin. Functions bot_2_controller(data) This function control complete functioning of ur5_2 Pick and Placement operation of boxes and belt start and stop operations. :param data: It contains LogicalCameraImage information published from topic /eyrc/vb/logical_camera_2 :return: null get_order_number(data) Callback function It publishes data to the topic /eyrc/vb/order_number :param data: It is a msg containing order_id,city and name. :return: null get_time_str(estimated_time_of_delivery) This function return a time string of now plus estimated_time_of_delivery days :param estimated_time_of_delivery: Number of days to be added in time right now. :return: String of time. main() match_boxcolor_with_no(data)","title":"Ur5_2"},{"location":"ur5_2_controller/#module-ur5_2_controller","text":"This file control ur5_2, handle conveyor belt and placement of boxes from belt to bin.","title":"Module ur5_2_controller"},{"location":"ur5_2_controller/#functions","text":"bot_2_controller(data) This function control complete functioning of ur5_2 Pick and Placement operation of boxes and belt start and stop operations. :param data: It contains LogicalCameraImage information published from topic /eyrc/vb/logical_camera_2 :return: null get_order_number(data) Callback function It publishes data to the topic /eyrc/vb/order_number :param data: It is a msg containing order_id,city and name. :return: null get_time_str(estimated_time_of_delivery) This function return a time string of now plus estimated_time_of_delivery days :param estimated_time_of_delivery: Number of days to be added in time right now. :return: String of time. main() match_boxcolor_with_no(data)","title":"Functions"},{"location":"ur5_moveit/","text":"Module ur5_moveit This file contain Ur5Moveit class to control bot and rviz planning scene. Functions define_joint_angle_list(shoulder_pan_joint, shoulder_lift_joint, elbow_joint, wrist_1_joint, wrist_2_joint, wrist_3_joint) This function takes float values for each joint and returns a list. :param shoulder_pan_joint: shoulder pan joint angle :param shoulder_lift_joint: shoulder lift join angle :param elbow_joint: elbow joint angle :param wrist_1_joint: wrist 1 joint angle :param wrist_2_joint: wrist 2 joint angle :param wrist_3_joint: wrist 3 joint angle :return: list of all joint angles define_pose(x, y, z) This function define geometry_msgs.msg.Pose() from giving coordinates. :param x: x coordinate :param y: y coordinate :param z: z coordinate :return: ur5_pose of type geometry_msgs.msg.Pose() containing x,y,z coordinate. get_item_details(item) This function finds packgen details using item :param item: item is a string containing packgen content type :return: it returns dict of details of packgen. Classes Ur5Moveit This class enables bot and rviz connection, and setup the configuration of ur5 bot. Select bot name, planning group ,etc. Ancestors (in MRO) ------------------ ur5_moveit.Ur5Moveit Instance variables ------------------ box_name group is_conver_active Methods ------- __init__(self, robot_name) Constructor :param robot_name: name of bot which you want to control. add_box(self, x, y, z, b_name) This function adds a box in rviz planning scene. :param x: x coordinate of box :param y: y coordinate of box :param z: z coordinate of box :param b_name: name to be given to the box in planning scene :return: boolean attach_box(self, b_name, timeout=4) This function attach to box with vacuum gripper in rviz planning scene to avoid collision :param b_name:box name which needs to be attached. :param timeout: time period :return: boolean clear_octomap(self) detach_box(self, b_name, timeout=4) This function detach to box from vacuum gripper in rviz planning scene to avoid collision :param b_name:box name which needs to be detached. :param timeout: time period :return: boolean ee_cartesian_translation(self, trans_x, trans_y, trans_z) This function helps in translating bot in x,y,z direction using cartesian coordinate system. :param trans_x: Displacement in x direction. :param trans_y: Displacement in y direction. :param trans_z: Displacement in z direction. go_to_pose(self, arg_pose) This function plans path to a pose and move ur5 to that pose. :param arg_pose: pose of desired location of type geometry_msgs.msg.Pose() :return: boolean hard_go_to_pose(self, arg_pose, arg_max_attempts) This function calls go_to_pose() function multiple time until it succeed or reaches maximum attempt limit. :param arg_pose: pose of desired location of type geometry_msgs.msg.Pose() :param arg_max_attempts: maximum attempts for calling go_to_pose() :return: boolean hard_set_joint_angles(self, arg_list_joint_angles, arg_max_attempts) This function calls set_joint_angles() multiple times until it succeed or reaches maximum attempt limit :param arg_list_joint_angles: list of all joint angles :param arg_max_attempts: maximum attempt :return: boolean remove_box(self, b_name, timeout=4) This function removes box form rviz planning scene. :param timeout: time period :param b_name: name of box which need to be removed from planning scene :return: boolean set_joint_angles(self, arg_list_joint_angles) This function sets angle of each joint of ur5 to reach a specific position. :param arg_list_joint_angles: list of joints :return: boolean trigger_converbelt(self, value) this function sets belt speed using ros service :param value: value of speed. :return: null wait_for_state_update(self, box_is_known=False, box_is_attached=False, box_name='box', timeout=4) Check status of box in rviz :param timeout: time period :param box_is_known: State of box :param box_is_attached: State of box :param box_name: Name of box in rviz :return: boolean","title":"Ur5Moveit"},{"location":"ur5_moveit/#module-ur5_moveit","text":"This file contain Ur5Moveit class to control bot and rviz planning scene.","title":"Module ur5_moveit"},{"location":"ur5_moveit/#functions","text":"define_joint_angle_list(shoulder_pan_joint, shoulder_lift_joint, elbow_joint, wrist_1_joint, wrist_2_joint, wrist_3_joint) This function takes float values for each joint and returns a list. :param shoulder_pan_joint: shoulder pan joint angle :param shoulder_lift_joint: shoulder lift join angle :param elbow_joint: elbow joint angle :param wrist_1_joint: wrist 1 joint angle :param wrist_2_joint: wrist 2 joint angle :param wrist_3_joint: wrist 3 joint angle :return: list of all joint angles define_pose(x, y, z) This function define geometry_msgs.msg.Pose() from giving coordinates. :param x: x coordinate :param y: y coordinate :param z: z coordinate :return: ur5_pose of type geometry_msgs.msg.Pose() containing x,y,z coordinate. get_item_details(item) This function finds packgen details using item :param item: item is a string containing packgen content type :return: it returns dict of details of packgen.","title":"Functions"},{"location":"ur5_moveit/#classes","text":"Ur5Moveit This class enables bot and rviz connection, and setup the configuration of ur5 bot. Select bot name, planning group ,etc. Ancestors (in MRO) ------------------ ur5_moveit.Ur5Moveit Instance variables ------------------ box_name group is_conver_active Methods ------- __init__(self, robot_name) Constructor :param robot_name: name of bot which you want to control. add_box(self, x, y, z, b_name) This function adds a box in rviz planning scene. :param x: x coordinate of box :param y: y coordinate of box :param z: z coordinate of box :param b_name: name to be given to the box in planning scene :return: boolean attach_box(self, b_name, timeout=4) This function attach to box with vacuum gripper in rviz planning scene to avoid collision :param b_name:box name which needs to be attached. :param timeout: time period :return: boolean clear_octomap(self) detach_box(self, b_name, timeout=4) This function detach to box from vacuum gripper in rviz planning scene to avoid collision :param b_name:box name which needs to be detached. :param timeout: time period :return: boolean ee_cartesian_translation(self, trans_x, trans_y, trans_z) This function helps in translating bot in x,y,z direction using cartesian coordinate system. :param trans_x: Displacement in x direction. :param trans_y: Displacement in y direction. :param trans_z: Displacement in z direction. go_to_pose(self, arg_pose) This function plans path to a pose and move ur5 to that pose. :param arg_pose: pose of desired location of type geometry_msgs.msg.Pose() :return: boolean hard_go_to_pose(self, arg_pose, arg_max_attempts) This function calls go_to_pose() function multiple time until it succeed or reaches maximum attempt limit. :param arg_pose: pose of desired location of type geometry_msgs.msg.Pose() :param arg_max_attempts: maximum attempts for calling go_to_pose() :return: boolean hard_set_joint_angles(self, arg_list_joint_angles, arg_max_attempts) This function calls set_joint_angles() multiple times until it succeed or reaches maximum attempt limit :param arg_list_joint_angles: list of all joint angles :param arg_max_attempts: maximum attempt :return: boolean remove_box(self, b_name, timeout=4) This function removes box form rviz planning scene. :param timeout: time period :param b_name: name of box which need to be removed from planning scene :return: boolean set_joint_angles(self, arg_list_joint_angles) This function sets angle of each joint of ur5 to reach a specific position. :param arg_list_joint_angles: list of joints :return: boolean trigger_converbelt(self, value) this function sets belt speed using ros service :param value: value of speed. :return: null wait_for_state_update(self, box_is_known=False, box_is_attached=False, box_name='box', timeout=4) Check status of box in rviz :param timeout: time period :param box_is_known: State of box :param box_is_attached: State of box :param box_name: Name of box in rviz :return: boolean","title":"Classes"}]}